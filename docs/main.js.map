{"version":3,"sources":["./src/app/Components/home/home.component.html","./src/app/Components/home/home.component.ts","./src/environments/environment.ts","./src/app/Components/Shared/modal/modal.component.ts","./src/app/Components/Shared/modal/modal.component.html","./src/app/Models/RequestModels/login-request.ts","./src/app/Constants/AppConstants.ts","./src/app/Components/login/login.component.ts","./src/app/Components/login/login.component.html","./src/app/Services/SignUp/sign-up.service.ts","./src/app/Services/Login/login.service.ts","./src/app/app.component.ts","./src/app/app.component.html","./src/app/app.module.ts","./src/app/Services/Home/home.service.ts","./src/app/Components/sign-up/sign-up.component.ts","./src/app/Components/sign-up/sign-up.component.html","./src/app/app-routing.module.ts","./src/main.ts","./$_lazy_route_resource lazy namespace object"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["\n\n<div id=\"HomeComponent\" class=\"row vh-100\">\n    <div class=\" d-flex align-items-center\">\n        <div id=\"appName\" [(ngModel)]=\"user\" *ngIf=\"user\" ngDefaultControl class=\"display-5 mx-auto my-auto text-center\">Hello  {{user.firstName}} !!!</div>\n    </div>\n</div>\n","import { Component, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { ModalDismissReasons, NgbModal } from '@ng-bootstrap/ng-bootstrap';\nimport { UserResponseModel } from 'src/app/Models/ResponseModels/sign-up-response';\nimport { HomeService } from 'src/app/Services/Home/home.service';\n\n@Component({\n  selector: 'app-home',\n  templateUrl: './home.component.html',\n  styleUrls: ['./home.component.css']\n})\nexport class HomeComponent implements OnInit {\n\n  user : UserResponseModel;\n  constructor(private service: HomeService, private router:Router,private modalService:NgbModal) { }\n  \n  ngOnInit(): void {\n    this.service.GetUserDetails().subscribe(\n      response=>{\n        console.log(response);\n        this.user=response;\n      },\n      err=>{\n        alert(\"Cant't Get User Details\")\n      }\n    );\n  }\n\n}\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { MethodCall } from '@angular/compiler';\nimport { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\nimport { ModalDismissReasons, NgbModal } from '@ng-bootstrap/ng-bootstrap';\nimport { emit } from 'process';\n\n\n@Component({\n  selector: 'app-modal',\n  templateUrl: './modal.component.html',\n  styleUrls: ['./modal.component.css']\n})\nexport class ModalComponent implements OnInit {\n\n  closeResult: string = '';\n  @Input() modalTitle='';\n  @Input() modalHeading='';\n  @Input() modalContent='';\n  @Input() okayButtonRedirectLink='';\n  @Output() emittOpenMethod=new EventEmitter<any>();\n \n  constructor(private modalService:NgbModal) { \n    this.emittOpenMethod.emit(this.open)\n  }\n\n  public openModal()\n  {\n    document.getElementById('btn_open_modal').click();\n  }\n   open(content:any) {\n    this.modalService.open(content);\n  }\n  \n  \n\n  ngOnInit(): void {\n  }\n\n}\n","<div id=\"modal-container\">\n    <ng-template #mymodal let-modal>\n        \n        <div class=\"card app-gradient-background shadow-lg my-auto\" style=\"width: 100%;\">\n          <div class=\"card-body\">\n            <div class=\"card-title\">{{modalTitle}} \n              <button (click)=\"modal.close()\" class=\"onFocus-light font-monospace float-end \">x</button>\n            </div>\n            <h6 class=\"card-subtitle mb-2 text-muted\">{{modalHeading}}</h6>\n            <p class=\"card-body\">{{modalContent}}</p>\n            <button (click)=\"modal.close()\" routerLink=\"/{{okayButtonRedirectComponent}}\" class=\"onFocus-light font-monospace float-end \">Okay</button>\n          </div>\n        </div>\n        \n      </ng-template>\n</div>\n\n<button id=\"btn_open_modal\" class=\"btn btn-outline-primary mt-5 visually-hidden\" (click)=\"open(mymodal)\">Open Modal</button>","export class LoginRequest {\n    public email:string;\n    public password:string;\n    constructor(email:string,password:string)\n    {\n        this.email=email;\n        this.password=password;\n    }\n}","export const baseUrl='http://192.168.1.18:8080/mobile-app-ws/';\r\n// export const baseUrl='http://ec2-3-108-185-146.ap-south-1.compute.amazonaws.com:8080/mobile-app/';\r\n// export enum signUpMessages2{\r\n//  sucess='Signup Sucessfull !!!',\r\n//  fail='Signup failed !!! ',\r\n//  redirectRequest='Redirect to SignIn Page ?',\r\n//  formInvalidName='Invalid name',\r\n//  formInvalidEmail='Invalid emailId',\r\n//  formMissingPassword='Please enter a password',\r\n//  formInvalidStreetName='Enter location ',\r\n//  formInvalidCity=\"Invalid City\",\r\n//  formInvalidCountry=\"Invalid country\",\r\n//  formInvalidPostalCode='Please enter a valid postal code'\r\n// }\r\n\r\nexport enum formsValidationMessages{\r\n    redirectRequest='Redirect to SignIn Page ?',\r\n    formInvalidName='Invalid name',\r\n    formInvalidEmail='Invalid emailId',\r\n    formMissingPassword='Please enter a password',\r\n    formInvalidStreetName='Enter location ',\r\n    formInvalidCity=\"Invalid City\",\r\n    formInvalidCountry=\"Invalid country\",\r\n    formInvalidPostalCode='Please enter a valid postal code'\r\n   }\r\n\r\n   export enum responseMessages{\r\n    sucess='Signup Sucessfull !!!',\r\n    fail='Signup failed !!! ',\r\n   }\r\n   export enum diplayMessages{\r\n    redirectRequest='Redirect to SignIn Page ?',\r\n   }\r\n\r\n\r\n\r\nexport enum addressType{\r\n    billing=\"billing\",\r\n    shipping=\"shipping\"\r\n}\r\nexport enum appURLs{\r\n    login='/Login',\r\n    signUp='/SignUp',\r\n    home='/Home'\r\n}","import { Component, OnInit } from '@angular/core';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\nimport { Router } from '@angular/router';\nimport { formsValidationMessages } from 'src/app/Constants/AppConstants';\nimport { LoginRequest } from 'src/app/Models/RequestModels/login-request';\nimport { LoginService } from 'src/app/Services/Login/login.service';\n\n@Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.css']\n})\nexport class LoginComponent implements OnInit {\n\n  LoginForm: FormGroup =new FormGroup({ \n    email: new FormControl('',[Validators.required, Validators.email]),\n    password : new FormControl('', Validators.required)\n  })\n  headers;\n  config;\n  formsValidationMessages=formsValidationMessages;\n  constructor(private service: LoginService, private router:Router) { \n    localStorage.removeItem('userId');\n    localStorage.removeItem('token');\n  }\n\n  login()\n  {\n    let loginRequest:LoginRequest=new LoginRequest(this.LoginForm.value['email'],this.LoginForm.value['password']);\n    this.service.login(loginRequest).subscribe(\n      resp => {        \n        if(resp.status==200)\n        {\n          localStorage.setItem('userId',resp.headers.get('UserId'));\n          localStorage.setItem('token',resp.headers.get('authorization'));\n          this.router.navigateByUrl(\"/Home\");\n      }\n      else if(resp.status==null)\n      {\n        alert(\"Login failed\");\n      }\n      },\n      err=>{\n        \n        alert(\"Invalid Credentials\");\n      }\n      );\n      \n  }\n\n  ngOnInit(): void {\n  }\n\n}\n","<div id=\"loginComponent\" class=\"row vh-100 \">\n\n    <div class=\" d-none d-md-inline-block col-md-8 bg-dark bg-gradient d-flex align-items-center text-center\">\n        <div id=\"appName\" class=\"display-4 \">SpringBoot Aws Test Front</div>\n    </div>\n\n    <div id=\"LogInFormDiv\" class=\" d-block d-md-block col-10 col-md-3  mx-auto my-md-auto \">\n        <div class=\" d-inline-block d-md-none col-12 text-center\">\n            <div id=\"appName\" class=\"display-5 \">SpringBoot Front</div>\n        </div>\n        <mat-icon id = \"accountIcon\" class=\"mb-5 text-dark\">perm_identity</mat-icon>\n        <form [formGroup]=\"LoginForm\">\n            <div class=\"row mb-3\">\n                <div *ngIf=\"LoginForm.controls.email.invalid && (LoginForm.controls.email.dirty)\"\n                    class=\" mx-auto text-danger text-center rounded-lg mb-2 font-monospace\">{{formsValidationMessages.formInvalidEmail}}</div>\n                <input class=\"row ml-3 col-12 shadow-bottom bg-transparent\" type=\"email\" formControlName=\"email\" placeholder=\"Email\">\n            </div>\n            <div class=\"row mb-3\">\n                <div *ngIf=\"LoginForm.controls.password.invalid && (LoginForm.controls.password.dirty)\"\n                    class=\" mx-auto text-danger text-center rounded-lg mb-2 font-monospace\">{{formsValidationMessages.formMissingPassword}}</div>\n                <input class=\"row ml-3 col-12 shadow-bottom bg-transparent\" type=\"password\" formControlName=\"password\"\n                    placeholder=\"Password\">\n            </div>\n            <div class=\"row mb-3 \">\n                <button class=\"btn col-2 rounded rounded-pill mx-auto shadow-bottom \" type=\"reset\"><mat-icon>dangerous</mat-icon></button>\n                <button class=\"btn col-2 rounded rounded-pill mx-auto shadow-bottom \" type=\"submit\" (click)='login()' (keyup.enter)='login()'\n                    [disabled]='LoginForm.invalid'><mat-icon>login</mat-icon></button>\n\n            </div>\n        </form>\n        <div class=\"row ml-3\">\n            <button id=\"btn_signUp\" class=\"shadow-bottom col-12 rounded rounded-pill row my-2 bg-gradient bg-dark  text-light  btn\"\n                routerLink=\"/SignUp\"> Sign Up </button>\n                \n                    \n        </div>\n    </div>\n\n\n</div>\n","import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { baseUrl } from 'src/app/Constants/AppConstants';\nimport { SignUpRequestModel } from 'src/app/Models/RequestModels/sign-up-request';\nimport { UserResponseModel } from 'src/app/Models/ResponseModels/sign-up-response';\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class SignUpService {\n\n  constructor(private httpClient:HttpClient) { }\n\n  SignUp(signUpRequestModel : SignUpRequestModel )\n  {\n    let signUpUrl=baseUrl+\"users\";\n    let body=JSON.parse(JSON.stringify(signUpRequestModel));\n    return this.httpClient.post<UserResponseModel>(signUpUrl,body);\n  }\n\n}","import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { baseUrl } from 'src/app/Constants/AppConstants';\nimport { LoginRequest } from 'src/app/Models/RequestModels/login-request';\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class LoginService {\n\n  constructor(private httpClient: HttpClient) { }\n  login(loginRequest : LoginRequest )\n  {\n     const body=JSON.parse(JSON.stringify(loginRequest));\n    \n     let urlForLogin=baseUrl+'users/login';\n    //let urlForLogin=\"http://192.168.1.13:8080/users/spRw8ghVUBhiEZQI5bHhZXKucuB9Ff\";\n   //let urlForLogin=\"http://192.168.1.13:8080/dummy\";\n    //return this.httpClient.get(urlForLogin,{headers:{Authorization:\"Bearer eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJTYXF1aWJAZ21haWwuY29tIiwiZXhwIjoxNjIzMjM3NTQ1fQ.92jFheuqqbcSneKK7hT8p13Z8-vA9XSBjOSlMfyzDUNBUr8BooK4UZPXzAsnD-x9Fn1n-IYDJ3Vb7bp4wn7JYg\"}});\n    return this.httpClient.post(urlForLogin,body,{observe:'response'});\n  }\n}","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n  title = 'TestFront';\n}\n","\n<!doctype html>\n<html lang=\"en\">\n  <head>\n    <!-- Required meta tags -->\n    <meta charset=\"utf-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n    <link rel=\"preconnect\" href=\"https://fonts.googleapis.com\">\n    <link rel=\"preconnect\" href=\"https://fonts.gstatic.com\" crossorigin>\n    <link href=\"https://fonts.googleapis.com/css2?family=Crimson+Text:wght@600&display=swap\" rel=\"stylesheet\">\n    <!-- Bootstrap CSS -->\n    <link href=\"https://cdn.jsdelivr.net/npm/bootstrap@5.1.0/dist/css/bootstrap.min.css\" rel=\"stylesheet\" integrity=\"sha384-KyZXEAg3QhqLMpG8r+8fhAXLRk2vvoC2f3B09zVXn8CA5QIVfZOJ3BCsw2P0p/We\" crossorigin=\"anonymous\">\n\n    <title>Hello, world!</title>\n  </head>\n  <body class=\"\">\n    <div class=\"container-fluid\">      \n      <router-outlet></router-outlet>\n    </div>\n\n\n    <!-- Bootstrap Bundle with Popper -->\n    <script src=\"https://cdn.jsdelivr.net/npm/bootstrap@5.1.0/dist/js/bootstrap.bundle.min.js\" integrity=\"sha384-U1DAWAznBHeqEIlVSCgzq+c9gqGAJn5c/t99JyeKa9xxaYpSvHU5awsuZVVFIhvj\" crossorigin=\"anonymous\"></script>\n\n  </body>\n</html>","import { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { HttpClientModule } from '@angular/common/http';\nimport { BrowserModule } from '@angular/platform-browser';\nimport {MatIconModule} from '@angular/material/icon';\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from './app.component';\nimport { LoginComponent } from './Components/login/login.component';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\nimport { SignUpComponent } from './Components/sign-up/sign-up.component';\nimport { HomeComponent } from './Components/home/home.component';\nimport { NgbModule } from '@ng-bootstrap/ng-bootstrap';\nimport { ModalComponent } from './Components/Shared/modal/modal.component';\n\n\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    LoginComponent,\n    SignUpComponent,\n    HomeComponent,\n    ModalComponent\n  ],\n  imports: [\n    NgbModule,\n    BrowserModule,\n    AppRoutingModule,\n    ReactiveFormsModule,\n    HttpClientModule,\n    FormsModule,\n    MatIconModule,\n    BrowserAnimationsModule\n  ],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { baseUrl } from 'src/app/Constants/AppConstants';\nimport { UserResponseModel } from 'src/app/Models/ResponseModels/sign-up-response';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class HomeService {\n\n  constructor(private httpClient: HttpClient) { }\n\n  GetUserDetails( )\n  {\n    let userDetailsUrl=baseUrl+\"users/\"+localStorage.getItem(\"userId\");    \n\n    return this.httpClient.get<UserResponseModel>(userDetailsUrl,{headers:{\"Authorization\":localStorage.getItem(\"token\")}});\n  }\n\n}\n","import { Component, OnInit, ViewChild } from '@angular/core';\nimport { FormArray, FormControl, FormGroup, Validators } from '@angular/forms';\nimport { ErrorStateMatcher } from '@angular/material/core';\nimport {\n  formsValidationMessages,\n  responseMessages,\n  appURLs,\n  addressType,\n  diplayMessages\n} from 'src/app/Constants/AppConstants';\nimport { AddressRequestModel } from 'src/app/Models/RequestModels/address-request-model';\nimport { SignUpRequestModel } from 'src/app/Models/RequestModels/sign-up-request';\nimport { SignUpService } from 'src/app/Services/SignUp/sign-up.service';\nimport { ModalComponent } from '../Shared/modal/modal.component';\n\n@Component({\n  selector: 'app-sign-up',\n  templateUrl: './sign-up.component.html',\n  styleUrls: ['./sign-up.component.css'],\n})\nexport class SignUpComponent implements OnInit {\n\n  SignUpForm: FormGroup = new FormGroup(\n    {\n      firstName: new FormControl('', [\n        Validators.required,\n        Validators.pattern('^[a-zA-Z]+$'),\n      ]),\n      lastName: new FormControl('', [\n        Validators.required,\n        Validators.pattern('^[a-zA-Z]+$'),\n      ]),\n      email: new FormControl('', [Validators.required, Validators.email]),\n      password: new FormControl('', {\n        validators: Validators.required,\n        updateOn: 'change',\n      }),\n      addresses: new FormArray([\n        new FormGroup({\n          streetName: new FormControl('', [Validators.required]),\n          city: new FormControl('', [\n            Validators.required,\n            Validators.pattern('^[a-zA-Z ]*$'),\n          ]),\n          country: new FormControl('', [\n            Validators.required,\n            Validators.pattern('^[a-zA-Z ]*$'),\n          ]),\n          postalCode: new FormControl('', [\n            Validators.required,\n            Validators.pattern('^[0-9]{6}$'),\n          ]),\n          type: new FormControl(addressType.shipping, [\n            Validators.required,\n          ]),\n        }),\n        new FormGroup({\n          streetName: new FormControl('', [Validators.required]),\n          city: new FormControl('', [\n            Validators.required,\n            Validators.pattern('^[a-zA-Z ]*$'),\n          ]),\n          country: new FormControl('', [\n            Validators.required,\n            Validators.pattern('^[a-zA-Z ]*$'),\n          ]),\n          postalCode: new FormControl('', [\n            Validators.required,\n            Validators.pattern('^[0-9]{6}$'),\n          ]),\n          type: new FormControl(addressType.billing, [\n            Validators.required,\n          ]),\n        }),\n      ]),\n    },\n    {\n      updateOn: 'blur',\n    }\n  );\n\n  formsValidationMessages = formsValidationMessages;\n  appURLs = appURLs;\n  addressTypes=addressType; \n  responseMessages=responseMessages;\n  diplayMessages=diplayMessages;\n\n  public signUpRequest: SignUpRequestModel;\n  public testSignUpRequest: SignUpRequestModel;\n  title = 'appBootstrap';\n  public isCredentialsFormCollapsed = false;\n  public isBillingAddresssFormCollapsed=true;\n  public isShippingAddressFormCollpased=true;\n\n  constructor(private service: SignUpService) {}\n  @ViewChild('modal') modal: ModalComponent;\n\n  getAddressControlProperty(typeOfAddress: addressType, control: string,property:string) {\n\n    let index = -1;\n    if (typeOfAddress == addressType.shipping) index = 0;\n    if (typeOfAddress == addressType.billing) index = 1;\n    return (this.SignUpForm.controls.addresses as FormArray).controls[\n      index\n    ].get(control)[property];\n  }\n\n  isAddressFormInvalid(typeOfAddress: addressType) {\n    let index = -1;\n    if (typeOfAddress == addressType.shipping) index = 0;\n    if (typeOfAddress == addressType.billing) index = 1;\n    return (this.SignUpForm.controls.addresses as FormArray).controls[\n      index\n    ].invalid;\n  }\n\n  SignUp() {\n   \n    console.log(this.SignUpForm.value)\n      this.signUpRequest  =this.SignUpForm.value;\n\n     this.service.SignUp(this.signUpRequest).subscribe(\n       res=>{\n        if(res.userId!=null)\n       {\n          this.SignUpForm.reset();\n          this.modal.openModal();\n        }\n\n      },\n       err=>{\n         alert(responseMessages.fail);\n         console.log(err);\n       },\n       );\n  }\n\n  sameAddressCheckBoxClick(){\n    let addresses= this.SignUpForm.controls.addresses as FormArray;\n    if(this.isAddressFormInvalid(addressType.billing))\n    {\n      addresses.controls[1].patchValue(addresses.controls[0].value);\n    }\n    else\n    {\n      addresses.controls[1].reset();\n    }\n\n  }\n\n  validateAndCollapseForm() {\n    if (this.SignUpForm.valid) {\n       this.isCredentialsFormCollapsed = false;\n       this.isBillingAddresssFormCollapsed=true;\n       this.isShippingAddressFormCollpased=true;\n    }\n  }\n\n  openModal(method) {\n    method();\n  }\n\n  ngOnInit(): void {\n    // shrinks collapse once the form is valid\n    //this.SignUpForm.statusChanges.subscribe(newStatus=> {this.isCollapsed=true});\n  }\n}\n","<app-modal #modal [modalHeading]='responseMessages.sucess' [modalContent]='diplayMessages.redirectRequest'\n    [okayButtonRedirectLink]='appURLs.login'>\n</app-modal>\n\n<div id=\"signUpComponent\" class=\"row vh-100 \">\n\n    <div class=\" d-none d-md-inline-block col-md-8 bg-dark bg-gradient d-flex align-items-center text-center\">\n        <div id=\"appName\" class=\"display-4 \">SpringBoot Aws Test Front</div>\n    </div>\n\n    <div id=\"SignUpFormDiv\" class=\" d-block d-md-block col-10 col-md-3  mx-auto my-md-auto \">\n        <div class=\" d-inline-block d-md-none col-12 text-center\">\n            <div id=\"appName\" class=\"display-5 \">SpringBoot Front</div>\n        </div>\n\n        <mat-icon id=\"accountIcon\" class=\" text-black\">person_add_alt</mat-icon>\n        <form [formGroup]=\"SignUpForm\" class=\"mx-auto\">\n\n\n\n            <div class=\"row mb-3\">\n                <button\n                    class=\"shadow-bottom  col-12 rounded rounded-pill row my-2 bg-secondary bg-gradient text-light btn\"\n                    (click)=\"isCredentialsFormCollapsed = !isCredentialsFormCollapsed;\n                    isBillingAddresssFormCollapsed=true;\n                    isShippingAddressFormCollpased =true\"\n                    [ngClass]=\"{' border-bottom-danger ':SignUpForm.controls.firstName.invalid||SignUpForm.controls.lastName.invalid ||\n                                                                                 SignUpForm.controls.email.invalid||  SignUpForm.controls.password.invalid  }\">\n                    Credentials\n                </button>\n            </div>\n\n            <div id=\"credentials-form\"\n                [ngbCollapse]=\"isCredentialsFormCollapsed && !SignUpForm.controls.firstName.invalid && !SignUpForm.controls.lastName.invalid &&\n                                                        !SignUpForm.controls.email.invalid &&!SignUpForm.controls.password.invalid\">\n                <div class=\"row mb-3\">\n                    <!-- <div *ngIf=\"SignUpForm.invalid && (SignUpForm.dirty)\"\n                        class=\" mx-auto text-danger border border-danger px-2 rounded-lg mb-2\">Please enter compelete credentials</div> -->\n\n                    <div class=\"text-center text-danger rounded-lg mb-2 font-monospace\"\n                        *ngIf=\"(SignUpForm.controls.firstName.dirty && SignUpForm.controls.firstName.invalid)\">\n                        {{formsValidationMessages.formInvalidName}}\n                    </div>\n\n                    <input class=\"row  col-12 shadow-bottom bg-transparent\" type=\"text\" formControlName=\"firstName\"\n                        placeholder=\"First Name\" (blur)='validateAndCollapseForm()'>\n                </div>\n                <div class=\"row mb-3\">\n                    <div class=\" text-center text-danger rounded-lg mb-2 font-monospace\"\n                        *ngIf=\"(SignUpForm.controls.lastName.dirty && SignUpForm.controls.lastName.invalid)\">\n                        {{formsValidationMessages.formInvalidName}}\n                    </div>\n                    <input class=\"row col-12 shadow-bottom bg-transparent\" type=\"text\" formControlName=\"lastName\"\n                        placeholder=\"Last Name\" (blur)='validateAndCollapseForm()'>\n                </div>\n                <div class=\"row mb-3\">\n                    <div class=\" text-center text-danger rounded-lg mb-2 font-monospace\"\n                        *ngIf=\"(SignUpForm.controls.email.dirty && SignUpForm.controls.email.invalid)\">\n                        {{formsValidationMessages.formInvalidEmail}}\n                    </div>\n                    <input class=\"row col-12 shadow-bottom bg-transparent\" type=\"email\" formControlName=\"email\" placeholder=\"Email\"\n                        (blur)='validateAndCollapseForm()'>\n                </div>\n                <div class=\"row mb-3\">\n                    <div class=\" text-center text-danger rounded-lg mb-2 font-monospace\"\n                        *ngIf=\"(SignUpForm.controls.password.touched && SignUpForm.controls.password.invalid)\">\n                        {{formsValidationMessages.formMissingPassword}}\n                    </div>\n                    <input class=\"row  col-12 shadow-bottom bg-transparent\" type=\"text\" formControlName=\"password\"\n                        placeholder=\"Password\" (blur)='validateAndCollapseForm()'>\n                </div>\n            </div>\n\n            <div id='addresses' formArrayName='addresses'>\n\n                <div class=\"row mb-3\">\n                    <button\n                        class=\"shadow-bottom  col-12 rounded rounded-pill row my-2 bg-secondary bg-gradient text-light btn\"\n                        (click)=\"isShippingAddressFormCollpased=!isShippingAddressFormCollpased; isBillingAddresssFormCollapsed=true;isCredentialsFormCollapsed=true \"\n                        [ngClass]=\"{'border-bottom-danger': isAddressFormInvalid(addressTypes.shipping)}\">\n                        Shipping Address\n                    </button>\n                </div>\n                <!-- Shipping Address Form -->\n                <div id='shippingAddress' formGroupName='0'\n                    [ngbCollapse]=\" isShippingAddressFormCollpased  || SignUpForm.controls.firstName.invalid || SignUpForm.controls.lastName.invalid ||\n                                                                SignUpForm.controls.email.invalid || SignUpForm.controls.password.invalid \">\n\n                    <div class=\"row mb-3\">\n                        <div class=\" text-center text-danger rounded-lg mb-2 font-monospace\"\n                            *ngIf=\"(getAddressControlProperty(addressTypes.shipping,'streetName','dirty') && getAddressControlProperty(addressTypes.shipping,'streetName','invalid'))\">\n                            {{formsValidationMessages.formInvalidStreetName}}\n                        </div>\n                        <input class=\"row col-12 shadow-bottom bg-transparent\" type=\"text\" formControlName=\"streetName\"\n                            placeholder=\"House number and Street name\" (blur)='validateAndCollapseForm()'>\n                    </div>\n                    <div class=\"row mb-3\">\n                        <div class=\" text-center text-danger rounded-lg mb-2 font-monospace\"\n                            *ngIf=\"(getAddressControlProperty(addressTypes.shipping,'city','dirty') && getAddressControlProperty(addressTypes.shipping,'city','invalid'))\">\n                            {{formsValidationMessages.formInvalidCity}}\n                        </div>\n                        <input class=\"row col-12 shadow-bottom bg-transparent\" type=\"text\" formControlName=\"city\" placeholder=\"City\"\n                            (blur)='validateAndCollapseForm()'>\n                    </div>\n                    <div class=\"row mb-3\">\n                        <div class=\" text-center text-danger rounded-lg mb-2 font-monospace\"\n                            *ngIf=\"(getAddressControlProperty(addressTypes.shipping,'country','dirty') && getAddressControlProperty(addressTypes.shipping,'country','invalid'))\">\n                            {{formsValidationMessages.formInvalidCountry}}\n                        </div>\n                        <input class=\"row col-12 shadow-bottom bg-transparent\" type=\"text\" formControlName=\"country\"\n                            placeholder=\"Country\" (blur)='validateAndCollapseForm()'>\n                    </div>\n                    <div class=\"row mb-3\">\n                        <div class=\" text-center text-danger rounded-lg mb-2 font-monospace\"\n                            *ngIf=\"(getAddressControlProperty(addressTypes.shipping,'postalCode','dirty') && getAddressControlProperty(addressTypes.shipping,'postalCode','invalid'))\">\n                            {{formsValidationMessages.formInvalidPostalCode}}\n                        </div>\n                        <input class=\"row col-12 shadow-bottom bg-transparent\" type=\"text\" formControlName=\"postalCode\"\n                            placeholder=\"Zip Code\" (blur)='validateAndCollapseForm()'>\n                    </div>\n\n\n                </div>\n                <div class=\"row mb-3\">\n                    <button\n                        class=\"shadow-bottom  col-12 rounded rounded-pill row my-2 bg-secondary bg-gradient text-light btn\"\n                        (click)=\"isBillingAddresssFormCollapsed=!isBillingAddresssFormCollapsed; \n                                isShippingAddressFormCollpased=true;\n                                isCredentialsFormCollapsed=true\"\n                        [ngClass]=\"{'border-bottom-danger':isAddressFormInvalid(addressTypes.billing)}\">\n                        <span class=\"d-flex justify-content-end\">\n                            <span class=\"\">Billing Address</span>\n                        \n                            <div class=\"ms-5 small pt-1  \">\n                                \n                                <input class=\"form-check-input opacity-75\" type=\"checkbox\"  id=\"chkbx_SameAddress\" [disabled]=\"isAddressFormInvalid(addressTypes.shipping)\" (click)='sameAddressCheckBoxClick()'>\n                                <label class=\"form-check-label ms-1\" for=\"chkbx_SameAddress\">\n                                 Same \n                                </label>\n                              </div>\n                        </span>\n                        \n                    </button>\n                </div>\n                <!-- Billing Address Form -->\n                <div id='billingAddress' formGroupName='1'\n                    [ngbCollapse]=\"isBillingAddresssFormCollapsed || isAddressFormInvalid(addressTypes.shipping) \">\n\n                    <div class=\"row mb-3\">\n                        <div class=\" text-center text-danger rounded-lg mb-2 font-monospace\"\n                            *ngIf=\"(getAddressControlProperty(addressTypes.billing,'streetName','dirty') && getAddressControlProperty(addressTypes.billing,'streetName','invalid'))\">\n                            {{formsValidationMessages.formInvalidStreetName}}\n                        </div>\n                        <input class=\"row col-12 shadow-bottom bg-transparent\" type=\"text\" formControlName=\"streetName\"\n                            placeholder=\"House number and Street name\" (blur)='validateAndCollapseForm()'>\n                    </div>\n                    <div class=\"row mb-3\">\n                        <div class=\" text-center text-danger rounded-lg mb-2 font-monospace\"\n                            *ngIf=\"(getAddressControlProperty(addressTypes.billing,'city','dirty') && getAddressControlProperty(addressTypes.billing,'city','invalid'))\">\n                            {{formsValidationMessages.formInvalidCity}}\n                        </div>\n                        <input class=\"row col-12 shadow-bottom bg-transparent\" type=\"text\" formControlName=\"city\" placeholder=\"City\"\n                            (blur)='validateAndCollapseForm()'>\n                    </div>\n                    <div class=\"row mb-3\">\n                        <div class=\" text-center text-danger rounded-lg mb-2 font-monospace\"\n                            *ngIf=\"(getAddressControlProperty(addressTypes.billing,'country','dirty') && getAddressControlProperty(addressTypes.billing,'country','invalid'))\">\n                            {{formsValidationMessages.formInvalidCountry}}\n                        </div>\n                        <input class=\"row col-12 shadow-bottom bg-transparent\" type=\"text\" formControlName=\"country\"\n                            placeholder=\"Country\" (blur)='validateAndCollapseForm()'>\n                    </div>\n                    <div class=\"row mb-3\">\n                        <div class=\" text-center text-danger rounded-lg mb-2 font-monospace\"\n                            *ngIf=\"(getAddressControlProperty(addressTypes.billing,'postalCode','dirty') && getAddressControlProperty(addressTypes.billing,'postalCode','invalid'))\">\n                            {{formsValidationMessages.formInvalidPostalCode}}\n                        </div>\n                        <input class=\"row col-12 shadow-bottom bg-transparent\" type=\"text\" formControlName=\"postalCode\"\n                            placeholder=\"Zip Code\" (blur)='validateAndCollapseForm()'>\n                    </div>\n\n\n                </div>\n            </div>\n\n\n\n\n\n            <div class=\"row mb-3 \">\n                        \n                <button\n                    class=\" row col-12 shadow-bottom   rounded rounded-pill row my-2 bg-dark bg-gradient text-light  btn\"\n                    type=\"submit\" (click)='SignUp()' (keyup.enter)='SignUp()' [disabled]=\"SignUpForm.invalid\">\n                    <mat-icon>login</mat-icon>\n                </button>\n                <button class=\"shadow-bottom  col-12 rounded rounded-pill row my-2 bg-dark bg-gradient text-light btn\"\n                    type=\"reset\">Clear</button>\n\n            </div>\n           \n        </form>\n        <div class=\"row \">\n            <button id=\"btn_signUp\"\n                class=\"shadow-bottom  col-12 rounded rounded-pill row my-2 bg-gradient bg-dark  text-light  btn\"\n                routerLink=\"/Login\"><span class=\"text-uppercase\">Login Instead !!!</span></button>\n        </div>\n    </div>\n\n\n</div>","import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\nimport { HomeComponent } from './Components/home/home.component';\nimport { LoginComponent } from './Components/login/login.component';\nimport { SignUpComponent } from './Components/sign-up/sign-up.component';\n\n\nconst routes: Routes = [\n {path:'Login',component:LoginComponent},\n {path:'SignUp', component:SignUpComponent},\n {path:'Home',component:HomeComponent},\n {path:'',component:LoginComponent}\n];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule { }\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n","function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"zn8P\";"],"sourceRoot":"webpack:///"}